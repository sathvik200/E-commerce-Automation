# Name of your CI/CD pipeline
name: Selenium Test Pipeline

# Controls when the workflow will run
on:
  # Triggers the workflow on push events for the "main" branch
  push:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # The "build-and-test" job
  build-and-test:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # A sequence of tasks that will be executed as part of the job
    steps:
      # 1. Checkout Code: Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - name: Checkout Code
        uses: actions/checkout@v4

      # 2. Set up Java: Sets up a Java JDK environment for your tests
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven # Caches dependencies to speed up future builds

      # 3. Start Selenium Grid: Starts a standalone Selenium Grid with Chrome
      - name: Start Selenium Grid
        uses: SeleniumHQ/selenium-grid-action@v1

      # 4. Run Tests: Executes the Maven command to run your TestNG suite
      - name: Run Selenium Tests
        run: mvn clean test -B # The -B flag runs Maven in non-interactive (batch) mode

      # 5. Upload Report: Saves the test report as a downloadable artifact
      # This step runs even if the previous test step fails
      - name: Upload Test Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: extent-report
          path: target/reports/ExtentReport.html # Change this path to where your report is generated